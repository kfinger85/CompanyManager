// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompanyManager.Migrations
{
    [DbContext(typeof(CompanyManagerContext))]
    [Migration("20230528185428_InitialCreateV2")]
    partial class InitialCreateV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CompanyManager.Models.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CompanyManager.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId2")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CompanyManager.Models.Qualification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("CompanyManager.Models.Worker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId2")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("workers");
                });

            modelBuilder.Entity("CompanyManager.Models.WorkerProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("DateAssigned")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("date_assigned");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WorkerId");

                    b.ToTable("worker_project");
                });

            modelBuilder.Entity("CompanyManager.Models.WorkerQualification", b =>
                {
                    b.Property<long>("WorkerId")
                        .HasColumnType("bigint");

                    b.Property<long>("QualificationId")
                        .HasColumnType("bigint");

                    b.HasKey("WorkerId", "QualificationId");

                    b.HasIndex("QualificationId");

                    b.ToTable("WorkerQualification");
                });

            modelBuilder.Entity("CompanyQualification", b =>
                {
                    b.Property<long>("CompaniesId")
                        .HasColumnType("bigint");

                    b.Property<long>("QualificationsId")
                        .HasColumnType("bigint");

                    b.HasKey("CompaniesId", "QualificationsId");

                    b.HasIndex("QualificationsId");

                    b.ToTable("CompanyQualification");
                });

            modelBuilder.Entity("ProjectQualification", b =>
                {
                    b.Property<long>("ProjectsId")
                        .HasColumnType("bigint");

                    b.Property<long>("QualificationsId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectsId", "QualificationsId");

                    b.HasIndex("QualificationsId");

                    b.ToTable("ProjectQualification");
                });

            modelBuilder.Entity("ProjectWorker", b =>
                {
                    b.Property<long>("ProjectsId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkersId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectsId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("ProjectWorker");
                });

            modelBuilder.Entity("QualificationWorker", b =>
                {
                    b.Property<long>("QualificationsId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkersId")
                        .HasColumnType("bigint");

                    b.HasKey("QualificationsId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("QualificationWorker");
                });

            modelBuilder.Entity("CompanyManager.Models.Project", b =>
                {
                    b.HasOne("CompanyManager.Models.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CompanyManager.Models.Worker", b =>
                {
                    b.HasOne("CompanyManager.Models.Company", "Company")
                        .WithMany("Workers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CompanyManager.Models.WorkerProject", b =>
                {
                    b.HasOne("CompanyManager.Models.Project", "Project")
                        .WithMany("WorkerProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManager.Models.Worker", "Worker")
                        .WithMany("WorkerProjects")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("CompanyManager.Models.WorkerQualification", b =>
                {
                    b.HasOne("CompanyManager.Models.Qualification", "Qualification")
                        .WithMany("WorkerQualifications")
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManager.Models.Worker", "Worker")
                        .WithMany("WorkerQualifications")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Qualification");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("CompanyQualification", b =>
                {
                    b.HasOne("CompanyManager.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManager.Models.Qualification", null)
                        .WithMany()
                        .HasForeignKey("QualificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectQualification", b =>
                {
                    b.HasOne("CompanyManager.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManager.Models.Qualification", null)
                        .WithMany()
                        .HasForeignKey("QualificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectWorker", b =>
                {
                    b.HasOne("CompanyManager.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManager.Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QualificationWorker", b =>
                {
                    b.HasOne("CompanyManager.Models.Qualification", null)
                        .WithMany()
                        .HasForeignKey("QualificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManager.Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyManager.Models.Company", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("CompanyManager.Models.Project", b =>
                {
                    b.Navigation("WorkerProjects");
                });

            modelBuilder.Entity("CompanyManager.Models.Qualification", b =>
                {
                    b.Navigation("WorkerQualifications");
                });

            modelBuilder.Entity("CompanyManager.Models.Worker", b =>
                {
                    b.Navigation("WorkerProjects");

                    b.Navigation("WorkerQualifications");
                });
#pragma warning restore 612, 618
        }
    }
}
